{"version":3,"sources":["index.js"],"names":["ToDo","toDo","handleToggle","id","task","className","complete","onClick","e","preventDefault","currentTarget","ToDoList","toDoList","handleFilter","Array","isArray","length","map","icon","label","ToDoForm","addTask","React","useState","userInput","setUserInput","onSubmit","value","placeholder","onChange","App","defaultValue","key","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","UseLocalStorage","setToDoList","toast","useRef","ref","current","show","severity","summary","detail","mapped","filtered","filter","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6d87933.chunk.js","sourcesContent":["/**\n * @file Provides the main functionality of the app. Utilizes React Hooks.\n * @author DorukKantarcioglu\n * @version 0.1.0\n */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Button} from 'primereact/button';\nimport {InputText} from 'primereact/inputtext';\nimport {Toast} from 'primereact/toast';\nimport 'primereact/resources/themes/bootstrap4-light-blue/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport 'primeflex/primeflex.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nfunction ToDo({toDo, handleToggle}) \n{\n  const handleClick = (e) => {\n    e.preventDefault();\n    handleToggle(e.currentTarget.id);\n  };\n\n  return (\n    <div id={toDo.task} className={toDo.complete ? 'toDo marked' : 'toDo'} onClick={handleClick}>\n      {toDo.task}\n    </div>\n  );\n}\n\nfunction ToDoList({toDoList, handleToggle, handleFilter}) \n{\n  if (Array.isArray(toDoList) && toDoList.length > 0) {\n    return (\n      <div className='list'>\n        {toDoList.map((toDo) => {\n          return (\n            <ToDo key={toDo.task} toDo={toDo} handleToggle={handleToggle}/>\n          )\n        })}\n        <Button id='listButton' className='p-shadow-13' icon='pi pi-trash' label={'Clear marked'} onClick={handleFilter}/>\n      </div>\n    );\n  }\n  else {\n    return null;\n  }\n}\n\nfunction ToDoForm({addTask}) \n{\n  const [userInput, setUserInput] = React.useState('');\n  const handleChange = (e) => {\n    setUserInput(e.currentTarget.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addTask(userInput);\n    setUserInput('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <InputText id='formInputText' className='p-shadow-7 p-inputtext-lg' value={userInput} placeholder='Enter your task here...' onChange={handleChange}/>\n      <Button id='formButton' className='p-shadow-7 p-button-lg' label={'Add to list'} icon='pi pi-check'/>\n      <h1 id='heading'>My to do list:</h1>\n    </form>\n  );\n}\n\nfunction UseLocalStorage(defaultValue, key) {\n  const [value, setValue] = React.useState(() => {\n    return (localStorage.getItem(key) !== null\n      ? JSON.parse(localStorage.getItem(key)) : defaultValue);\n  });\n\n  React.useEffect(() => {localStorage.setItem(key, JSON.stringify(value))}, [key, value]);\n  return [value, setValue];\n}\n  \nfunction App() {\n    const [toDoList, setToDoList] = UseLocalStorage(null, 'toDoList');\n    const toast = React.useRef();\n  \n    const handleToggle = (task) => {\n        if (toDoList.length) {\n            let mapped = toDoList.map((toDo) => {\n                return toDo.task === task ? { ...toDo, complete: !toDo.complete } : { ...toDo};\n        });\n        setToDoList(mapped);\n        } \n    };\n  \n    const handleFilter = () => {\n      let filtered = null;\n      if (Array.isArray(toDoList)) {\n        filtered = toDoList.filter((toDo) => {\n          return !toDo.complete;\n        });\n        if (filtered.length === toDoList.length) {\n          toast.current.show({severity: 'error', summary: 'No marked tasks', detail: 'There aren\\'t any marked tasks to clear!'});\n        }\n        setToDoList(filtered);\n      }\n    };\n  \n    const addTask = (userInput) => {\n      if (!userInput) {\n        toast.current.show({severity: 'error', summary: 'Empty task', detail: 'The task needs to be nonempty!'});\n        return;\n      }\n      if (Array.isArray(toDoList)) {\n        for (let toDo of toDoList) {\n          if (toDo.task === userInput) {\n            toast.current.show({severity: 'warn', summary: 'Existing task', detail: 'The task ' + userInput + ' is already on the list!'});\n            return;\n          }\n        }\n        setToDoList([...toDoList, {task: userInput, complete: false }]);\n      }\n      else {\n        setToDoList([{task: userInput, complete: false}]);\n      }\n      toast.current.show({severity: 'success', summary: 'Task added', detail: 'The task ' + userInput + ' is now on the list.'});\n    };\n  \n    return (\n      <div>\n        <header>\n          <h1 className='p-text-center'>Your own to do list!</h1>\n          <h2>A to do list for you to add, mark or remove tasks you wish to accomplish.</h2>\n          <h4>How to use the app:</h4>\n          <ol>\n            <li>First, enter the task you want to accomplish to the text field below.</li>\n            <li>After typing the task, either press enter or click the <em>Add to list</em> button.</li>\n            <li>If a task is done, click on that task to mark it.</li>\n            <li>To clear all marked tasks, click the <em>Clear marked</em> button.</li>\n          </ol>\n          <Toast ref={toast}/>\n        </header>\n        <main className='p-text-center p-grid p-dir-col'>\n          <ToDoForm className='p-col' addTask={addTask}/>     \n          <ToDoList className='p-col' toDoList={toDoList} handleToggle={handleToggle} handleFilter={handleFilter}/>\n        </main>\n        <footer className={(Array.isArray(toDoList) && toDoList.length) ? 'hidden' : null}>\n          Implemented by Doruk Kantarcıoğlu, source code available on <a href='https://github.com/DorukKantarcioglu/to-do-list'>GitHub</a>.\n        </footer>\n      </div>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}